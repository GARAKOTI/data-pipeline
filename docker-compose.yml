version: "3.8"

services:
  producer:
    build:
      context: ./kafka/producers
    container_name: random-user-producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - KAFKA_BROKER=kafka:29092
    networks:
      - pipeline-network

  zookeeper:
    image: bitnami/zookeeper:3.8
    container_name: zookeeper
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - pipeline-network
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD", "zkServer.sh", "status"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: bitnami/kafka:3.4
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,DOCKER://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,DOCKER://kafka:29092
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
    depends_on:
      zookeeper:
        condition: service_healthy
    networks:
      - pipeline-network
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  spark-wordcount:
    build:
      context: ./spark
      dockerfile: Dockerfile
    container_name: spark-wordcount
    networks:
      - pipeline-network
    ports:
      - "4040:4040"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4040"]
      interval: 15s
      timeout: 5s
      retries: 5

networks:
  pipeline-network:
    driver: bridge
